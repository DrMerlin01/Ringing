

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Mar 26 12:59:18 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	intentry,global,class=CODE,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 1.45
    15                           ; Generated 16/11/2017 GMT
    16                           ; 
    17                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  000E                     _TMR1	set	14
   109  000B                     _INTCON	set	11
   110  0001                     _TMR0	set	1
   111  0006                     _PORTBbits	set	6
   112  0008                     _PORTDbits	set	8
   113  0008                     _PORTD	set	8
   114  0006                     _PORTB	set	6
   115  0084                     _T1CKPS0	set	132
   116  0085                     _T1CKPS1	set	133
   117  0083                     _T1OSCEN	set	131
   118  0080                     _TMR1ON	set	128
   119  005D                     _T0IE	set	93
   120  005A                     _T0IF	set	90
   121  0060                     _TMR1IF	set	96
   122  0081                     _OPTION_REG	set	129
   123  0088                     _TRISD	set	136
   124  0086                     _TRISB	set	134
   125  0460                     _TMR1IE	set	1120
   126                           
   127                           ; #config settings
   128  0000                     
   129                           	psect	cinit
   130  0015                     start_initialization:	
   131  0015                     __initialization:	
   132                           
   133                           ; Clear objects allocated to COMMON
   134  0015  01F4               	clrf	__pbssCOMMON& (0+127)
   135  0016  01F5               	clrf	(__pbssCOMMON+1)& (0+127)
   136  0017                     end_of_initialization:	
   137                           ;End of C runtime variable initialization code
   138                           
   139  0017                     __end_of__initialization:	
   140  0017  0183               	clrf	3
   141  0018  120A  118A  2876   	ljmp	_main	;jump to C main() function
   142                           
   143                           	psect	bssCOMMON
   144  0074                     __pbssCOMMON:	
   145  0074                     _n:	
   146  0074                     	ds	2
   147                           
   148                           	psect	cstackCOMMON
   149  0070                     __pcstackCOMMON:	
   150  0070                     ?_reset:	
   151  0070                     ?_isr:	
   152                           ; 1 bytes @ 0x0
   153                           
   154  0070                     ??_isr:	
   155                           ; 1 bytes @ 0x0
   156                           
   157  0070                     ?i1_reset:	
   158                           ; 1 bytes @ 0x0
   159                           
   160  0070                     ??i1_reset:	
   161                           ; 1 bytes @ 0x0
   162                           
   163  0070                     ?_main:	
   164                           ; 1 bytes @ 0x0
   165                           
   166                           
   167                           ; 2 bytes @ 0x0
   168  0070                     	ds	4
   169  0074                     ??_reset:	
   170  0074                     ??_main:	
   171                           ; 1 bytes @ 0x4
   172                           
   173                           
   174                           	psect	maintext
   175  0076                     __pmaintext:	
   176                           ; 1 bytes @ 0x4
   177 ;;
   178 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   179 ;;
   180 ;; *************** function _main *****************
   181 ;; Defined at:
   182 ;;		line 69 in file "main.c"
   183 ;; Parameters:    Size  Location     Type
   184 ;;		None
   185 ;; Auto vars:     Size  Location     Type
   186 ;;		None
   187 ;; Return value:  Size  Location     Type
   188 ;;                  2   66[None  ] int 
   189 ;; Registers used:
   190 ;;		wreg, status,2, status,0, pclath, cstack
   191 ;; Tracked objects:
   192 ;;		On entry : B00/0
   193 ;;		On exit  : 0/0
   194 ;;		Unchanged: 0/0
   195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   196 ;;      Params:         0       0       0       0       0
   197 ;;      Locals:         0       0       0       0       0
   198 ;;      Temps:          0       0       0       0       0
   199 ;;      Totals:         0       0       0       0       0
   200 ;;Total ram usage:        0 bytes
   201 ;; Hardware stack levels required when called:    3
   202 ;; This function calls:
   203 ;;		_reset
   204 ;; This function is called by:
   205 ;;		Startup code after reset
   206 ;; This function uses a non-reentrant model
   207 ;;
   208                           
   209                           
   210                           ;psect for function _main
   211  0076                     _main:	
   212                           
   213                           ;main.c: 71: INTCON=0b11100000;
   214                           
   215                           ;incstack = 0
   216                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   217  0076  30E0               	movlw	224
   218  0077  008B               	movwf	11	;volatile
   219                           
   220                           ;main.c: 72: OPTION_REG=0b00000111;
   221  0078  3007               	movlw	7
   222  0079  1683               	bsf	3,5	;RP0=1, select bank1
   223  007A  1303               	bcf	3,6	;RP1=0, select bank1
   224  007B  0081               	movwf	1	;volatile
   225                           
   226                           ;main.c: 73: TMR0=0;
   227  007C  1283               	bcf	3,5	;RP0=0, select bank0
   228  007D  1303               	bcf	3,6	;RP1=0, select bank0
   229  007E  0181               	clrf	1	;volatile
   230                           
   231                           ;main.c: 74: T0IF=0;
   232  007F  110B               	bcf	11,2	;volatile
   233                           
   234                           ;main.c: 76: TMR1ON=1;
   235  0080  1410               	bsf	16,0	;volatile
   236                           
   237                           ;main.c: 77: T1OSCEN=1;
   238  0081  1590               	bsf	16,3	;volatile
   239                           
   240                           ;main.c: 78: TMR1IE=1;
   241  0082  1683               	bsf	3,5	;RP0=1, select bank1
   242  0083  1303               	bcf	3,6	;RP1=0, select bank1
   243  0084  140C               	bsf	12,0	;volatile
   244                           
   245                           ;main.c: 79: T1CKPS1=1;
   246  0085  1283               	bcf	3,5	;RP0=0, select bank0
   247  0086  1303               	bcf	3,6	;RP1=0, select bank0
   248  0087  1690               	bsf	16,5	;volatile
   249                           
   250                           ;main.c: 80: T1CKPS0=1;
   251  0088  1610               	bsf	16,4	;volatile
   252                           
   253                           ;main.c: 81: TMR1IF=0;
   254  0089  100C               	bcf	12,0	;volatile
   255                           
   256                           ;main.c: 82: TMR1=60000;
   257  008A  30EA               	movlw	234
   258  008B  008F               	movwf	15	;volatile
   259  008C  3060               	movlw	96
   260  008D  008E               	movwf	14	;volatile
   261                           
   262                           ;main.c: 84: reset();
   263  008E  120A  118A  2094  120A  118A  	fcall	_reset
   264  0093                     l67:	
   265                           ;main.c: 85: while(1){}
   266                           
   267  0093  2893               	goto	l67
   268  0094                     __end_of_main:	
   269                           
   270                           	psect	text1
   271  0094                     __ptext1:	
   272 ;; *************** function _reset *****************
   273 ;; Defined at:
   274 ;;		line 14 in file "main.c"
   275 ;; Parameters:    Size  Location     Type
   276 ;;		None
   277 ;; Auto vars:     Size  Location     Type
   278 ;;		None
   279 ;; Return value:  Size  Location     Type
   280 ;;                  1    wreg      void 
   281 ;; Registers used:
   282 ;;		wreg, status,2
   283 ;; Tracked objects:
   284 ;;		On entry : 0/0
   285 ;;		On exit  : 0/0
   286 ;;		Unchanged: 0/0
   287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   288 ;;      Params:         0       0       0       0       0
   289 ;;      Locals:         0       0       0       0       0
   290 ;;      Temps:          0       0       0       0       0
   291 ;;      Totals:         0       0       0       0       0
   292 ;;Total ram usage:        0 bytes
   293 ;; Hardware stack levels used:    1
   294 ;; Hardware stack levels required when called:    2
   295 ;; This function calls:
   296 ;;		Nothing
   297 ;; This function is called by:
   298 ;;		_main
   299 ;; This function uses a non-reentrant model
   300 ;;
   301                           
   302                           
   303                           ;psect for function _reset
   304  0094                     _reset:	
   305                           
   306                           ;main.c: 16: TRISB=0b00000000;
   307                           
   308                           ;incstack = 0
   309                           ; Regs used in _reset: [wreg+status,2]
   310  0094  1683               	bsf	3,5	;RP0=1, select bank1
   311  0095  1303               	bcf	3,6	;RP1=0, select bank1
   312  0096  0186               	clrf	6	;volatile
   313                           
   314                           ;main.c: 17: PORTB=0b11111111;
   315  0097  30FF               	movlw	255
   316  0098  1283               	bcf	3,5	;RP0=0, select bank0
   317  0099  1303               	bcf	3,6	;RP1=0, select bank0
   318  009A  0086               	movwf	6	;volatile
   319                           
   320                           ;main.c: 18: TRISD=0b11111111;
   321  009B  30FF               	movlw	255
   322  009C  1683               	bsf	3,5	;RP0=1, select bank1
   323  009D  1303               	bcf	3,6	;RP1=0, select bank1
   324  009E  0088               	movwf	8	;volatile
   325                           
   326                           ;main.c: 19: PORTD=0b11111100;
   327  009F  30FC               	movlw	252
   328  00A0  1283               	bcf	3,5	;RP0=0, select bank0
   329  00A1  1303               	bcf	3,6	;RP1=0, select bank0
   330  00A2  0088               	movwf	8	;volatile
   331  00A3  0008               	return
   332  00A4                     __end_of_reset:	
   333                           
   334                           	psect	text2
   335  001B                     __ptext2:	
   336 ;; *************** function _isr *****************
   337 ;; Defined at:
   338 ;;		line 22 in file "main.c"
   339 ;; Parameters:    Size  Location     Type
   340 ;;		None
   341 ;; Auto vars:     Size  Location     Type
   342 ;;		None
   343 ;; Return value:  Size  Location     Type
   344 ;;                  1    wreg      void 
   345 ;; Registers used:
   346 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   347 ;; Tracked objects:
   348 ;;		On entry : 0/0
   349 ;;		On exit  : 0/0
   350 ;;		Unchanged: 0/0
   351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   352 ;;      Params:         0       0       0       0       0
   353 ;;      Locals:         0       0       0       0       0
   354 ;;      Temps:          4       0       0       0       0
   355 ;;      Totals:         4       0       0       0       0
   356 ;;Total ram usage:        4 bytes
   357 ;; Hardware stack levels used:    1
   358 ;; Hardware stack levels required when called:    1
   359 ;; This function calls:
   360 ;;		i1_reset
   361 ;; This function is called by:
   362 ;;		Interrupt level 1
   363 ;; This function uses a non-reentrant model
   364 ;;
   365                           
   366                           
   367                           ;psect for function _isr
   368  001B                     _isr:	
   369                           
   370                           ;main.c: 24: if(TMR1IF&&TMR1IE)
   371  001B  1C0C               	btfss	12,0	;volatile
   372  001C  2857               	goto	i1l46
   373  001D  1683               	bsf	3,5	;RP0=1, select bank1
   374  001E  1303               	bcf	3,6	;RP1=0, select bank1
   375  001F  1C0C               	btfss	12,0	;volatile
   376  0020  2857               	goto	i1l46
   377                           
   378                           ;main.c: 25: {
   379                           ;main.c: 26: TMR1IF=0;
   380  0021  1283               	bcf	3,5	;RP0=0, select bank0
   381  0022  1303               	bcf	3,6	;RP1=0, select bank0
   382  0023  100C               	bcf	12,0	;volatile
   383                           
   384                           ;main.c: 27: TMR1=60000;
   385  0024  30EA               	movlw	234
   386  0025  008F               	movwf	15	;volatile
   387  0026  3060               	movlw	96
   388  0027  008E               	movwf	14	;volatile
   389                           
   390                           ;main.c: 29: if(PORTDbits.RD0==0)
   391  0028  1808               	btfsc	8,0	;volatile
   392  0029  286A               	goto	i1l62
   393                           
   394                           ;main.c: 30: {
   395                           ;main.c: 31: n++;
   396  002A  3001               	movlw	1
   397  002B  07F4               	addwf	_n,f
   398  002C  1803               	skipnc
   399  002D  0AF5               	incf	_n+1,f
   400  002E  3000               	movlw	0
   401  002F  07F5               	addwf	_n+1,f
   402                           
   403                           ;main.c: 32: if (n==10)
   404  0030  300A               	movlw	10
   405  0031  0674               	xorwf	_n,w
   406  0032  0475               	iorwf	_n+1,w
   407  0033  1903               	btfsc	3,2
   408                           
   409                           ;main.c: 33: {
   410                           ;main.c: 34: PORTBbits.RB0=0;
   411  0034  1006               	bcf	6,0	;volatile
   412                           
   413                           ;main.c: 35: }
   414                           ;main.c: 36: if (n==20)
   415  0035  3014               	movlw	20
   416  0036  0674               	xorwf	_n,w
   417  0037  0475               	iorwf	_n+1,w
   418  0038  1903               	btfsc	3,2
   419                           
   420                           ;main.c: 37: {
   421                           ;main.c: 38: PORTBbits.RB1=0;
   422  0039  1086               	bcf	6,1	;volatile
   423                           
   424                           ;main.c: 39: }
   425                           ;main.c: 40: if (n==30)
   426  003A  301E               	movlw	30
   427  003B  0674               	xorwf	_n,w
   428  003C  0475               	iorwf	_n+1,w
   429  003D  1903               	btfsc	3,2
   430                           
   431                           ;main.c: 41: {
   432                           ;main.c: 42: PORTBbits.RB2=0;
   433  003E  1106               	bcf	6,2	;volatile
   434                           
   435                           ;main.c: 43: }
   436                           ;main.c: 44: if (n==40)
   437  003F  3028               	movlw	40
   438  0040  0674               	xorwf	_n,w
   439  0041  0475               	iorwf	_n+1,w
   440  0042  1903               	btfsc	3,2
   441                           
   442                           ;main.c: 45: {
   443                           ;main.c: 46: PORTBbits.RB3=0;
   444  0043  1186               	bcf	6,3	;volatile
   445                           
   446                           ;main.c: 47: }
   447                           ;main.c: 48: if (n>40)
   448  0044  0875               	movf	_n+1,w
   449  0045  3A80               	xorlw	128
   450  0046  00FF               	movwf	127
   451  0047  3080               	movlw	128
   452  0048  027F               	subwf	127,w
   453  0049  1D03               	skipz
   454  004A  284D               	goto	u8_25
   455  004B  3029               	movlw	41
   456  004C  0274               	subwf	_n,w
   457  004D                     u8_25:	
   458  004D  1C03               	skipc
   459  004E  2852               	goto	i1l53
   460                           
   461                           ;main.c: 49: {
   462                           ;main.c: 50: PORTB=0x00;
   463  004F  1283               	bcf	3,5	;RP0=0, select bank0
   464  0050  1303               	bcf	3,6	;RP1=0, select bank0
   465  0051  0186               	clrf	6	;volatile
   466  0052                     i1l53:	
   467                           ;main.c: 51: }
   468                           ;main.c: 52: while(PORTDbits.RD0==0){};
   469                           
   470  0052  1283               	bcf	3,5	;RP0=0, select bank0
   471  0053  1303               	bcf	3,6	;RP1=0, select bank0
   472  0054  1808               	btfsc	8,0	;volatile
   473  0055  286A               	goto	i1l62
   474  0056  2852               	goto	i1l53
   475  0057                     i1l46:	
   476                           ;main.c: 53: }
   477                           ;main.c: 54: }
   478                           
   479                           
   480                           ;main.c: 55: else if (T0IF&&T0IE)
   481  0057  190B               	btfsc	11,2	;volatile
   482  0058  1E8B               	btfss	11,5	;volatile
   483  0059  286A               	goto	i1l62
   484                           
   485                           ;main.c: 56: {
   486                           ;main.c: 57: T0IF=0;
   487  005A  110B               	bcf	11,2	;volatile
   488                           
   489                           ;main.c: 58: TMR0=0;
   490  005B  1283               	bcf	3,5	;RP0=0, select bank0
   491  005C  0181               	clrf	1	;volatile
   492                           
   493                           ;main.c: 60: if(PORTDbits.RD1==0)
   494  005D  1888               	btfsc	8,1	;volatile
   495  005E  286A               	goto	i1l62
   496                           
   497                           ;main.c: 61: {
   498                           ;main.c: 62: n=0;
   499  005F  01F4               	clrf	_n
   500  0060  01F5               	clrf	_n+1
   501                           
   502                           ;main.c: 63: reset();
   503  0061  120A  118A  20A4  120A  118A  	fcall	i1_reset
   504  0066                     i1l59:	
   505                           ;main.c: 64: while (PORTDbits.RD1==0){};
   506                           
   507  0066  1283               	bcf	3,5	;RP0=0, select bank0
   508  0067  1303               	bcf	3,6	;RP1=0, select bank0
   509  0068  1C88               	btfss	8,1	;volatile
   510  0069  2866               	goto	i1l59
   511  006A                     i1l62:	
   512  006A  0873               	movf	??_isr+3,w
   513  006B  1283               	bcf	3,5	;RP0=0, select bank0
   514  006C  00FF               	movwf	127
   515  006D  0872               	movf	??_isr+2,w
   516  006E  008A               	movwf	10
   517  006F  0871               	movf	??_isr+1,w
   518  0070  0084               	movwf	4
   519  0071  0E70               	swapf	??_isr^(0+-128),w
   520  0072  0083               	movwf	3
   521  0073  0EFE               	swapf	126,f
   522  0074  0E7E               	swapf	126,w
   523  0075  0009               	retfie
   524  0076                     __end_of_isr:	
   525                           
   526                           	psect	intentry
   527  0004                     __pintentry:	
   528                           ;incstack = 0
   529                           ; Regs used in _isr: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   530                           
   531  0004                     interrupt_function:	
   532  007E                     saved_w	set	btemp
   533  0004  00FE               	movwf	btemp
   534  0005  0E03               	swapf	3,w
   535  0006  00F0               	movwf	??_isr
   536  0007  0804               	movf	4,w
   537  0008  00F1               	movwf	??_isr+1
   538  0009  080A               	movf	10,w
   539  000A  00F2               	movwf	??_isr+2
   540  000B  1283               	bcf	3,5	;RP0=0, select bank0
   541  000C  1303               	bcf	3,6	;RP1=0, select bank0
   542  000D  087F               	movf	btemp+1,w
   543  000E  00F3               	movwf	??_isr+3
   544  000F  120A  118A  281B   	ljmp	_isr
   545                           
   546                           	psect	text3
   547  00A4                     __ptext3:	
   548 ;; *************** function i1_reset *****************
   549 ;; Defined at:
   550 ;;		line 14 in file "main.c"
   551 ;; Parameters:    Size  Location     Type
   552 ;;		None
   553 ;; Auto vars:     Size  Location     Type
   554 ;;		None
   555 ;; Return value:  Size  Location     Type
   556 ;;                  1    wreg      void 
   557 ;; Registers used:
   558 ;;		wreg, status,2
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   564 ;;      Params:         0       0       0       0       0
   565 ;;      Locals:         0       0       0       0       0
   566 ;;      Temps:          0       0       0       0       0
   567 ;;      Totals:         0       0       0       0       0
   568 ;;Total ram usage:        0 bytes
   569 ;; Hardware stack levels used:    1
   570 ;; This function calls:
   571 ;;		Nothing
   572 ;; This function is called by:
   573 ;;		_isr
   574 ;; This function uses a non-reentrant model
   575 ;;
   576                           
   577                           
   578                           ;psect for function i1_reset
   579  00A4                     i1_reset:	
   580                           
   581                           ;main.c: 16: TRISB=0b00000000;
   582                           
   583                           ;incstack = 0
   584                           ; Regs used in i1_reset: [wreg+status,2]
   585  00A4  1683               	bsf	3,5	;RP0=1, select bank1
   586  00A5  1303               	bcf	3,6	;RP1=0, select bank1
   587  00A6  0186               	clrf	6	;volatile
   588                           
   589                           ;main.c: 17: PORTB=0b11111111;
   590  00A7  30FF               	movlw	255
   591  00A8  1283               	bcf	3,5	;RP0=0, select bank0
   592  00A9  1303               	bcf	3,6	;RP1=0, select bank0
   593  00AA  0086               	movwf	6	;volatile
   594                           
   595                           ;main.c: 18: TRISD=0b11111111;
   596  00AB  30FF               	movlw	255
   597  00AC  1683               	bsf	3,5	;RP0=1, select bank1
   598  00AD  1303               	bcf	3,6	;RP1=0, select bank1
   599  00AE  0088               	movwf	8	;volatile
   600                           
   601                           ;main.c: 19: PORTD=0b11111100;
   602  00AF  30FC               	movlw	252
   603  00B0  1283               	bcf	3,5	;RP0=0, select bank0
   604  00B1  1303               	bcf	3,6	;RP1=0, select bank0
   605  00B2  0088               	movwf	8	;volatile
   606  00B3  0008               	return
   607  00B4                     __end_ofi1_reset:	
   608  007E                     btemp	set	126	;btemp
   609  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      4       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                              _reset
 ---------------------------------------------------------------------------------
 (1) _reset                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  4     4      0       0
                                              0 COMMON     4     4      0
                            i1_reset
 ---------------------------------------------------------------------------------
 (3) i1_reset                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _reset

 _isr (ROOT)
   i1_reset

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      4       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       6       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       6      12        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Mar 26 12:59:18 2018

                      _n 0074              __CFG_CP$OFF 0000                       l67 0093  
            __CFG_LVP$ON 0000             __CFG_CPD$OFF 0000                      _isr 001B  
                    fsr0 0004             __CFG_FOSC$HS 0000                     ?_isr 0070  
                   _T0IE 005D                     _T0IF 005A                     i1l53 0052  
                   i1l62 006A                     i1l46 0057                     i1l59 0066  
                   _TMR0 0001                     _TMR1 000E                     u8_25 004D  
           __CFG_WRT$OFF 0000                     _main 0076                     btemp 007E  
          __CFG_BOREN$ON 0000                     start 0012          __end_ofi1_reset 00B4  
                  ??_isr 0070                    ?_main 0070            __CFG_WDTE$OFF 0000  
                  _PORTB 0006                    _PORTD 0008                    _TRISB 0086  
                  _TRISD 0088            __CFG_PWRTE$ON 0000                    _reset 0094  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_main 0094                   ??_main 0074  
                 ?_reset 0070                   _INTCON 000B                ??i1_reset 0070  
                 _TMR1IE 0460                   _TMR1IF 0060                   _TMR1ON 0080  
                 saved_w 007E  __end_of__initialization 0017           __pcstackCOMMON 0070  
          __end_of_reset 00A4                  ??_reset 0074               __pmaintext 0076  
             __pintentry 0004                  _T1CKPS0 0084                  _T1CKPS1 0085  
                _T1OSCEN 0083                  i1_reset 00A4                  __ptext1 0094  
                __ptext2 001B                  __ptext3 00A4             __size_of_isr 005B  
   end_of_initialization 0017                _PORTBbits 0006                _PORTDbits 0008  
    start_initialization 0015              __end_of_isr 0076              __pbssCOMMON 0074  
              ___latbits 0002                 ?i1_reset 0070           __size_of_reset 0010  
      interrupt_function 0004         __size_ofi1_reset 0010            __size_of_main 001E  
               intlevel1 0000               _OPTION_REG 0081  
