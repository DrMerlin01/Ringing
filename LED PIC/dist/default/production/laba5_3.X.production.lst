

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 09 23:00:40 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 1.45
    19                           ; Generated 16/11/2017 GMT
    20                           ; 
    21                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112                           
   113                           	psect	idataCOMMON
   114  0234                     __pidataCOMMON:	
   115                           
   116                           ;initializer for _result
   117  0234  3414               	retlw	20
   118  0235  3400               	retlw	0
   119                           
   120                           ;initializer for _key
   121  0236  3414               	retlw	20
   122  0237  3400               	retlw	0
   123                           
   124                           	psect	idataBANK0
   125  022A                     __pidataBANK0:	
   126                           
   127                           ;initializer for _fourth
   128  022A  3407               	retlw	7
   129  022B  3400               	retlw	0
   130                           
   131                           ;initializer for _third
   132  022C  3406               	retlw	6
   133  022D  3400               	retlw	0
   134                           
   135                           ;initializer for _second
   136  022E  3405               	retlw	5
   137  022F  3400               	retlw	0
   138                           
   139                           ;initializer for _first
   140  0230  3404               	retlw	4
   141  0231  3400               	retlw	0
   142                           
   143                           ;initializer for _temp
   144  0232  3404               	retlw	4
   145  0233  3400               	retlw	0
   146  000E                     _TMR1	set	14
   147  000B                     _INTCON	set	11
   148  0005                     _PORTA	set	5
   149  0001                     _TMR0	set	1
   150  0006                     _PORTBbits	set	6
   151  0006                     _PORTB	set	6
   152  0008                     _PORTD	set	8
   153  0084                     _T1CKPS0	set	132
   154  0085                     _T1CKPS1	set	133
   155  0080                     _TMR1ON	set	128
   156  005A                     _T0IF	set	90
   157  0060                     _TMR1IF	set	96
   158  0081                     _OPTION_REG	set	129
   159  0085                     _TRISA	set	133
   160  0088                     _TRISD	set	136
   161  0086                     _TRISB	set	134
   162  0460                     _TMR1IE	set	1120
   163                           
   164                           ; #config settings
   165  0000                     
   166                           	psect	cinit
   167  0015                     start_initialization:	
   168  0015                     __initialization:	
   169                           
   170                           ; Initialize objects allocated to BANK0
   171  0015  1383               	bcf	3,7	;select IRP bank0
   172  0016  302A               	movlw	low (__pdataBANK0+10)
   173  0017  00FD               	movwf	btemp+-1
   174  0018  3002               	movlw	high __pidataBANK0
   175  0019  00FE               	movwf	btemp
   176  001A  302A               	movlw	low __pidataBANK0
   177  001B  00FF               	movwf	btemp+1
   178  001C  3020               	movlw	low __pdataBANK0
   179  001D  0084               	movwf	4
   180  001E  120A  118A  221D  120A  118A  	fcall	init_ram0
   181                           
   182                           ; Initialize objects allocated to COMMON
   183  0023  120A  118A  2234  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   184  0028  00F9               	movwf	__pdataCOMMON& (0+127)
   185  0029  120A  118A  2235  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   186  002E  00FA               	movwf	(__pdataCOMMON+1)& (0+127)
   187  002F  120A  118A  2236  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   188  0034  00FB               	movwf	(__pdataCOMMON+2)& (0+127)
   189  0035  120A  118A  2237   	fcall	__pidataCOMMON+3	;fetch initializer
   190  0038  00FC               	movwf	(__pdataCOMMON+3)& (0+127)
   191  0039                     end_of_initialization:	
   192                           ;End of C runtime variable initialization code
   193                           
   194  0039                     __end_of__initialization:	
   195  0039  0183               	clrf	3
   196  003A  120A  118A  29F6   	ljmp	_main	;jump to C main() function
   197                           
   198                           	psect	dataCOMMON
   199  0079                     __pdataCOMMON:	
   200  0079                     _result:	
   201  0079                     	ds	2
   202  007B                     _key:	
   203  007B                     	ds	2
   204                           
   205                           	psect	dataBANK0
   206  0020                     __pdataBANK0:	
   207  0020                     _fourth:	
   208  0020                     	ds	2
   209  0022                     _third:	
   210  0022                     	ds	2
   211  0024                     _second:	
   212  0024                     	ds	2
   213  0026                     _first:	
   214  0026                     	ds	2
   215  0028                     _temp:	
   216  0028                     	ds	2
   217                           
   218                           	psect	inittext
   219  0219                     init_fetch0:	
   220                           ;	Called with low address in FSR and high address in W
   221                           
   222  0219  087E               	movf	126,w
   223  021A  008A               	movwf	10
   224  021B  087F               	movf	127,w
   225  021C  0082               	movwf	2
   226  021D                     init_ram0:	
   227                           ;Called with:
   228                           ;	high address of idata address in btemp 
   229                           ;	low address of idata address in btemp+1 
   230                           ;	low address of data in FSR
   231                           ;	high address + 1 of data in btemp-1
   232                           
   233  021D  2219  120A  118A   	fcall	init_fetch0
   234  0220  0080               	movwf	0
   235  0221  0A84               	incf	4,f
   236  0222  0804               	movf	4,w
   237  0223  067D               	xorwf	125,w
   238  0224  1903               	btfsc	3,2
   239  0225  3400               	retlw	0
   240  0226  0AFF               	incf	127,f
   241  0227  1903               	btfsc	3,2
   242  0228  0AFE               	incf	126,f
   243  0229  2A1D               	goto	init_ram0
   244                           
   245                           	psect	cstackCOMMON
   246  0070                     __pcstackCOMMON:	
   247  0070                     ?_show:	
   248  0070                     ?_isr:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_main:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     show@digit:	
   255                           ; 2 bytes @ 0x0
   256                           
   257                           
   258                           ; 2 bytes @ 0x0
   259  0070                     	ds	2
   260  0072                     ??_show:	
   261                           
   262                           ; 1 bytes @ 0x2
   263  0072                     	ds	1
   264  0073                     ??_isr:	
   265                           
   266                           ; 1 bytes @ 0x3
   267  0073                     	ds	6
   268                           
   269                           	psect	cstackBANK0
   270  0000                     __pcstackBANK0:	
   271  0000                     ??_main:	
   272                           
   273                           	psect	maintext
   274  01F6                     __pmaintext:	
   275                           ; 1 bytes @ 0x0
   276 ;;
   277 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   278 ;;
   279 ;; *************** function _main *****************
   280 ;; Defined at:
   281 ;;		line 218 in file "main.c"
   282 ;; Parameters:    Size  Location     Type
   283 ;;		None
   284 ;; Auto vars:     Size  Location     Type
   285 ;;		None
   286 ;; Return value:  Size  Location     Type
   287 ;;                  2   99[None  ] int 
   288 ;; Registers used:
   289 ;;		wreg, status,2
   290 ;; Tracked objects:
   291 ;;		On entry : B00/0
   292 ;;		On exit  : 0/0
   293 ;;		Unchanged: 0/0
   294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   295 ;;      Params:         0       0       0       0       0
   296 ;;      Locals:         0       0       0       0       0
   297 ;;      Temps:          0       0       0       0       0
   298 ;;      Totals:         0       0       0       0       0
   299 ;;Total ram usage:        0 bytes
   300 ;; Hardware stack levels required when called:    2
   301 ;; This function calls:
   302 ;;		Nothing
   303 ;; This function is called by:
   304 ;;		Startup code after reset
   305 ;; This function uses a non-reentrant model
   306 ;;
   307                           
   308                           
   309                           ;psect for function _main
   310  01F6                     _main:	
   311                           
   312                           ;main.c: 220: TRISD = 0x00;
   313                           
   314                           ;incstack = 0
   315                           ; Regs used in _main: [wreg+status,2]
   316  01F6  1683               	bsf	3,5	;RP0=1, select bank1
   317  01F7  1303               	bcf	3,6	;RP1=0, select bank1
   318  01F8  0188               	clrf	8	;volatile
   319                           
   320                           ;main.c: 221: PORTD = 0x00;
   321  01F9  1283               	bcf	3,5	;RP0=0, select bank0
   322  01FA  1303               	bcf	3,6	;RP1=0, select bank0
   323  01FB  0188               	clrf	8	;volatile
   324                           
   325                           ;main.c: 222: TRISA=0x00;
   326  01FC  1683               	bsf	3,5	;RP0=1, select bank1
   327  01FD  1303               	bcf	3,6	;RP1=0, select bank1
   328  01FE  0185               	clrf	5	;volatile
   329                           
   330                           ;main.c: 223: PORTA=0xFF;
   331  01FF  30FF               	movlw	255
   332  0200  1283               	bcf	3,5	;RP0=0, select bank0
   333  0201  1303               	bcf	3,6	;RP1=0, select bank0
   334  0202  0085               	movwf	5	;volatile
   335                           
   336                           ;main.c: 225: INTCON=0b11100000;
   337  0203  30E0               	movlw	224
   338  0204  008B               	movwf	11	;volatile
   339                           
   340                           ;main.c: 226: OPTION_REG=0b00000111;
   341  0205  3007               	movlw	7
   342  0206  1683               	bsf	3,5	;RP0=1, select bank1
   343  0207  1303               	bcf	3,6	;RP1=0, select bank1
   344  0208  0081               	movwf	1	;volatile
   345                           
   346                           ;main.c: 227: TMR0=0;
   347  0209  1283               	bcf	3,5	;RP0=0, select bank0
   348  020A  1303               	bcf	3,6	;RP1=0, select bank0
   349  020B  0181               	clrf	1	;volatile
   350                           
   351                           ;main.c: 229: TMR1ON=1;
   352  020C  1410               	bsf	16,0	;volatile
   353                           
   354                           ;main.c: 230: TMR1IE=1;
   355  020D  1683               	bsf	3,5	;RP0=1, select bank1
   356  020E  1303               	bcf	3,6	;RP1=0, select bank1
   357  020F  140C               	bsf	12,0	;volatile
   358                           
   359                           ;main.c: 231: T1CKPS1=1;
   360  0210  1283               	bcf	3,5	;RP0=0, select bank0
   361  0211  1303               	bcf	3,6	;RP1=0, select bank0
   362  0212  1690               	bsf	16,5	;volatile
   363                           
   364                           ;main.c: 232: T1CKPS0=1;
   365  0213  1610               	bsf	16,4	;volatile
   366                           
   367                           ;main.c: 233: TMR1=60000;
   368  0214  30EA               	movlw	234
   369  0215  008F               	movwf	15	;volatile
   370  0216  3060               	movlw	96
   371  0217  008E               	movwf	14	;volatile
   372  0218                     l100:	
   373                           ;main.c: 235: while(1) {}
   374                           
   375  0218  2A18               	goto	l100
   376  0219                     __end_of_main:	
   377                           
   378                           	psect	text1
   379  003D                     __ptext1:	
   380 ;; *************** function _isr *****************
   381 ;; Defined at:
   382 ;;		line 123 in file "main.c"
   383 ;; Parameters:    Size  Location     Type
   384 ;;		None
   385 ;; Auto vars:     Size  Location     Type
   386 ;;		None
   387 ;; Return value:  Size  Location     Type
   388 ;;                  1    wreg      void 
   389 ;; Registers used:
   390 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   391 ;; Tracked objects:
   392 ;;		On entry : 0/0
   393 ;;		On exit  : 0/0
   394 ;;		Unchanged: 0/0
   395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   396 ;;      Params:         0       0       0       0       0
   397 ;;      Locals:         0       0       0       0       0
   398 ;;      Temps:          6       0       0       0       0
   399 ;;      Totals:         6       0       0       0       0
   400 ;;Total ram usage:        6 bytes
   401 ;; Hardware stack levels used:    1
   402 ;; Hardware stack levels required when called:    1
   403 ;; This function calls:
   404 ;;		_show
   405 ;; This function is called by:
   406 ;;		Interrupt level 1
   407 ;; This function uses a non-reentrant model
   408 ;;
   409                           
   410                           
   411                           ;psect for function _isr
   412  003D                     _isr:	
   413                           
   414                           ;main.c: 125: if(TMR1IF==1)
   415  003D  1C0C               	btfss	12,0	;volatile
   416  003E  28A9               	goto	i1l819
   417                           
   418                           ;main.c: 126: {
   419                           ;main.c: 127: TMR1IF=0;
   420  003F  100C               	bcf	12,0	;volatile
   421                           
   422                           ;main.c: 128: TMR1=60000;
   423  0040  30EA               	movlw	234
   424  0041  008F               	movwf	15	;volatile
   425  0042  3060               	movlw	96
   426  0043  008E               	movwf	14	;volatile
   427                           
   428                           ;main.c: 130: TRISB=0xF0;
   429  0044  30F0               	movlw	240
   430  0045  1683               	bsf	3,5	;RP0=1, select bank1
   431  0046  1303               	bcf	3,6	;RP1=0, select bank1
   432  0047  0086               	movwf	6	;volatile
   433                           
   434                           ;main.c: 131: PORTB=0x0F;
   435  0048  300F               	movlw	15
   436  0049  1283               	bcf	3,5	;RP0=0, select bank0
   437  004A  1303               	bcf	3,6	;RP1=0, select bank0
   438  004B  0086               	movwf	6	;volatile
   439                           
   440                           ;main.c: 132: if ((PORTBbits.RB0&0x01)==0) key=0;
   441  004C  1806               	btfsc	6,0	;volatile
   442  004D  2850               	goto	i1l795
   443  004E  01FB               	clrf	_key
   444  004F  01FC               	clrf	_key+1
   445  0050                     i1l795:	
   446                           ;main.c: 133: if ((PORTBbits.RB1&0x02)==0) key=4;
   447                           
   448  0050  3004               	movlw	4
   449  0051  00FB               	movwf	_key
   450  0052  3000               	movlw	0
   451  0053  00FC               	movwf	_key+1
   452                           
   453                           ;main.c: 134: if ((PORTBbits.RB2&0x03)==0) key=8;
   454  0054  1906               	btfsc	6,2	;volatile
   455  0055  285A               	goto	i1l77
   456  0056  3008               	movlw	8
   457  0057  00FB               	movwf	_key
   458  0058  3000               	movlw	0
   459  0059  00FC               	movwf	_key+1
   460  005A                     i1l77:	
   461                           ;main.c: 135: if ((PORTBbits.RB3&0x04)==0) key=12;
   462                           
   463  005A  300C               	movlw	12
   464  005B  00FB               	movwf	_key
   465  005C  3000               	movlw	0
   466  005D  00FC               	movwf	_key+1
   467                           
   468                           ;main.c: 137: TRISB=0x0F;
   469  005E  300F               	movlw	15
   470  005F  1683               	bsf	3,5	;RP0=1, select bank1
   471  0060  1303               	bcf	3,6	;RP1=0, select bank1
   472  0061  0086               	movwf	6	;volatile
   473                           
   474                           ;main.c: 138: PORTB=0xF0;
   475  0062  30F0               	movlw	240
   476  0063  1283               	bcf	3,5	;RP0=0, select bank0
   477  0064  1303               	bcf	3,6	;RP1=0, select bank0
   478  0065  0086               	movwf	6	;volatile
   479                           
   480                           ;main.c: 139: if ((PORTBbits.RB4&0x1F)==1) key=key+0;
   481  0066  0806               	movf	6,w	;volatile
   482                           
   483                           ;main.c: 140: if ((PORTBbits.RB5&0x2F)==1) key=key+1;
   484  0067  1E86               	btfss	6,5	;volatile
   485  0068  2871               	goto	i1l805
   486  0069  087B               	movf	_key,w
   487  006A  3E01               	addlw	1
   488  006B  00FB               	movwf	_key
   489  006C  087C               	movf	_key+1,w
   490  006D  1803               	skipnc
   491  006E  3E01               	addlw	1
   492  006F  3E00               	addlw	0
   493  0070  00FC               	movwf	_key+1
   494  0071                     i1l805:	
   495                           
   496                           ;main.c: 141: if ((PORTBbits.RB6&0x3F)==1) key=key+2;
   497  0071  1F06               	btfss	6,6	;volatile
   498  0072  287B               	goto	i1l809
   499  0073  087B               	movf	_key,w
   500  0074  3E02               	addlw	2
   501  0075  00FB               	movwf	_key
   502  0076  087C               	movf	_key+1,w
   503  0077  1803               	skipnc
   504  0078  3E01               	addlw	1
   505  0079  3E00               	addlw	0
   506  007A  00FC               	movwf	_key+1
   507  007B                     i1l809:	
   508                           
   509                           ;main.c: 142: if ((PORTBbits.RB7&0x4F)==1) key=key+3;
   510  007B  1F86               	btfss	6,7	;volatile
   511  007C  2885               	goto	i1l82
   512  007D  087B               	movf	_key,w
   513  007E  3E03               	addlw	3
   514  007F  00FB               	movwf	_key
   515  0080  087C               	movf	_key+1,w
   516  0081  1803               	skipnc
   517  0082  3E01               	addlw	1
   518  0083  3E00               	addlw	0
   519  0084  00FC               	movwf	_key+1
   520  0085                     i1l82:	
   521                           
   522                           ;main.c: 145: if (key != 20)
   523  0085  3014               	movlw	20
   524  0086  067B               	xorwf	_key,w
   525  0087  047C               	iorwf	_key+1,w
   526  0088  1903               	btfsc	3,2
   527  0089  2894               	goto	i1l83
   528                           
   529                           ;main.c: 146: {
   530                           ;main.c: 147: result=key;
   531  008A  087C               	movf	_key+1,w
   532  008B  00FA               	movwf	_result+1
   533  008C  087B               	movf	_key,w
   534  008D  00F9               	movwf	_result
   535                           
   536                           ;main.c: 148: temp++;
   537  008E  3001               	movlw	1
   538  008F  07A8               	addwf	_temp,f
   539  0090  1803               	skipnc
   540  0091  0AA9               	incf	_temp+1,f
   541  0092  3000               	movlw	0
   542  0093  07A9               	addwf	_temp+1,f
   543  0094                     i1l83:	
   544                           
   545                           ;main.c: 149: }
   546                           ;main.c: 150: key=20;
   547  0094  3014               	movlw	20
   548  0095  00FB               	movwf	_key
   549  0096  3000               	movlw	0
   550  0097  00FC               	movwf	_key+1
   551                           
   552                           ;main.c: 152: if (temp > 7)
   553  0098  0829               	movf	_temp+1,w
   554  0099  3A80               	xorlw	128
   555  009A  00FF               	movwf	127
   556  009B  3080               	movlw	128
   557  009C  027F               	subwf	127,w
   558  009D  1D03               	skipz
   559  009E  28A1               	goto	u26_25
   560  009F  3008               	movlw	8
   561  00A0  0228               	subwf	_temp,w
   562  00A1                     u26_25:	
   563  00A1  1C03               	skipc
   564  00A2  28A9               	goto	i1l819
   565                           
   566                           ;main.c: 153: {
   567                           ;main.c: 154: temp = 4;
   568  00A3  3004               	movlw	4
   569  00A4  1283               	bcf	3,5	;RP0=0, select bank0
   570  00A5  1303               	bcf	3,6	;RP1=0, select bank0
   571  00A6  00A8               	movwf	_temp
   572  00A7  3000               	movlw	0
   573  00A8  00A9               	movwf	_temp+1
   574  00A9                     i1l819:	
   575                           
   576                           ;main.c: 155: }
   577                           ;main.c: 156: }
   578                           ;main.c: 158: if(T0IF==1)
   579  00A9  1D0B               	btfss	11,2	;volatile
   580  00AA  2940               	goto	i1l95
   581                           
   582                           ;main.c: 159: {
   583                           ;main.c: 160: T0IF=0;
   584  00AB  110B               	bcf	11,2	;volatile
   585                           
   586                           ;main.c: 161: TMR0=0;
   587  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   588  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   589  00AE  0181               	clrf	1	;volatile
   590                           
   591                           ;main.c: 162: if (result != 20)
   592  00AF  3014               	movlw	20
   593  00B0  0679               	xorwf	_result,w
   594  00B1  047A               	iorwf	_result+1,w
   595  00B2  1903               	btfsc	3,2
   596  00B3  28F4               	goto	i1l843
   597                           
   598                           ;main.c: 163: {
   599                           ;main.c: 164: if ((temp-1) == 4)
   600  00B4  0828               	movf	_temp,w
   601  00B5  3EFF               	addlw	255
   602  00B6  00F3               	movwf	??_isr
   603  00B7  0829               	movf	_temp+1,w
   604  00B8  1803               	skipnc
   605  00B9  3E01               	addlw	1
   606  00BA  3EFF               	addlw	255
   607  00BB  00F4               	movwf	??_isr+1
   608  00BC  3004               	movlw	4
   609  00BD  0673               	xorwf	??_isr,w
   610  00BE  0474               	iorwf	??_isr+1,w
   611  00BF  1D03               	btfss	3,2
   612  00C0  28C5               	goto	i1l831
   613                           
   614                           ;main.c: 165: {
   615                           ;main.c: 166: first = result;
   616  00C1  087A               	movf	_result+1,w
   617  00C2  00A7               	movwf	_first+1
   618  00C3  0879               	movf	_result,w
   619  00C4  00A6               	movwf	_first
   620  00C5                     i1l831:	
   621                           
   622                           ;main.c: 167: }
   623                           ;main.c: 168: if ((temp-1) == 5)
   624  00C5  0828               	movf	_temp,w
   625  00C6  3EFF               	addlw	255
   626  00C7  00F3               	movwf	??_isr
   627  00C8  0829               	movf	_temp+1,w
   628  00C9  1803               	skipnc
   629  00CA  3E01               	addlw	1
   630  00CB  3EFF               	addlw	255
   631  00CC  00F4               	movwf	??_isr+1
   632  00CD  3005               	movlw	5
   633  00CE  0673               	xorwf	??_isr,w
   634  00CF  0474               	iorwf	??_isr+1,w
   635  00D0  1D03               	btfss	3,2
   636  00D1  28D6               	goto	i1l835
   637                           
   638                           ;main.c: 169: {
   639                           ;main.c: 170: second = result;
   640  00D2  087A               	movf	_result+1,w
   641  00D3  00A5               	movwf	_second+1
   642  00D4  0879               	movf	_result,w
   643  00D5  00A4               	movwf	_second
   644  00D6                     i1l835:	
   645                           
   646                           ;main.c: 171: }
   647                           ;main.c: 172: if ((temp-1) == 6)
   648  00D6  0828               	movf	_temp,w
   649  00D7  3EFF               	addlw	255
   650  00D8  00F3               	movwf	??_isr
   651  00D9  0829               	movf	_temp+1,w
   652  00DA  1803               	skipnc
   653  00DB  3E01               	addlw	1
   654  00DC  3EFF               	addlw	255
   655  00DD  00F4               	movwf	??_isr+1
   656  00DE  3006               	movlw	6
   657  00DF  0673               	xorwf	??_isr,w
   658  00E0  0474               	iorwf	??_isr+1,w
   659  00E1  1D03               	btfss	3,2
   660  00E2  28E7               	goto	i1l839
   661                           
   662                           ;main.c: 173: {
   663                           ;main.c: 174: third = result;
   664  00E3  087A               	movf	_result+1,w
   665  00E4  00A3               	movwf	_third+1
   666  00E5  0879               	movf	_result,w
   667  00E6  00A2               	movwf	_third
   668  00E7                     i1l839:	
   669                           
   670                           ;main.c: 175: }
   671                           ;main.c: 176: if (temp == 4)
   672  00E7  3004               	movlw	4
   673  00E8  0628               	xorwf	_temp,w
   674  00E9  0429               	iorwf	_temp+1,w
   675  00EA  1D03               	btfss	3,2
   676  00EB  28F0               	goto	i1l90
   677                           
   678                           ;main.c: 177: {
   679                           ;main.c: 178: fourth = result;
   680  00EC  087A               	movf	_result+1,w
   681  00ED  00A1               	movwf	_fourth+1
   682  00EE  0879               	movf	_result,w
   683  00EF  00A0               	movwf	_fourth
   684  00F0                     i1l90:	
   685                           
   686                           ;main.c: 179: }
   687                           ;main.c: 180: result = 20;
   688  00F0  3014               	movlw	20
   689  00F1  00F9               	movwf	_result
   690  00F2  3000               	movlw	0
   691  00F3  00FA               	movwf	_result+1
   692  00F4                     i1l843:	
   693                           
   694                           ;main.c: 181: }
   695                           ;main.c: 184: PORTD=0x00;
   696  00F4  0188               	clrf	8	;volatile
   697                           
   698                           ;main.c: 185: PORTA |= (1<<0);
   699  00F5  1405               	bsf	5,0	;volatile
   700                           
   701                           ;main.c: 186: if(first>=0)
   702  00F6  1BA7               	btfsc	_first+1,7
   703  00F7  2901               	goto	i1l851
   704                           
   705                           ;main.c: 187: {
   706                           ;main.c: 188: show(first);
   707  00F8  0827               	movf	_first+1,w
   708  00F9  00F1               	movwf	show@digit+1
   709  00FA  0826               	movf	_first,w
   710  00FB  00F0               	movwf	show@digit
   711  00FC  120A  118A  214D  120A  118A  	fcall	_show
   712  0101                     i1l851:	
   713                           
   714                           ;main.c: 189: }
   715                           ;main.c: 190: PORTA &= ~(1<<0);
   716  0101  30FE               	movlw	254
   717  0102  00F3               	movwf	??_isr
   718  0103  0873               	movf	??_isr,w
   719  0104  1283               	bcf	3,5	;RP0=0, select bank0
   720  0105  1303               	bcf	3,6	;RP1=0, select bank0
   721  0106  0585               	andwf	5,f	;volatile
   722                           
   723                           ;main.c: 192: PORTD=0x00;
   724  0107  0188               	clrf	8	;volatile
   725                           
   726                           ;main.c: 193: PORTA |= (1<<1);
   727  0108  1485               	bsf	5,1	;volatile
   728                           
   729                           ;main.c: 194: if(second>=0)
   730  0109  1BA5               	btfsc	_second+1,7
   731  010A  2914               	goto	i1l861
   732                           
   733                           ;main.c: 195: {
   734                           ;main.c: 196: show(second);
   735  010B  0825               	movf	_second+1,w
   736  010C  00F1               	movwf	show@digit+1
   737  010D  0824               	movf	_second,w
   738  010E  00F0               	movwf	show@digit
   739  010F  120A  118A  214D  120A  118A  	fcall	_show
   740  0114                     i1l861:	
   741                           
   742                           ;main.c: 197: }
   743                           ;main.c: 198: PORTA &= ~(1<<1);
   744  0114  30FD               	movlw	253
   745  0115  00F3               	movwf	??_isr
   746  0116  0873               	movf	??_isr,w
   747  0117  1283               	bcf	3,5	;RP0=0, select bank0
   748  0118  1303               	bcf	3,6	;RP1=0, select bank0
   749  0119  0585               	andwf	5,f	;volatile
   750                           
   751                           ;main.c: 200: PORTD=0x00;
   752  011A  0188               	clrf	8	;volatile
   753                           
   754                           ;main.c: 201: PORTA |= (1<<2);
   755  011B  1505               	bsf	5,2	;volatile
   756                           
   757                           ;main.c: 202: if(third>=0)
   758  011C  1BA3               	btfsc	_third+1,7
   759  011D  2927               	goto	i1l871
   760                           
   761                           ;main.c: 203: {
   762                           ;main.c: 204: show(third);
   763  011E  0823               	movf	_third+1,w
   764  011F  00F1               	movwf	show@digit+1
   765  0120  0822               	movf	_third,w
   766  0121  00F0               	movwf	show@digit
   767  0122  120A  118A  214D  120A  118A  	fcall	_show
   768  0127                     i1l871:	
   769                           
   770                           ;main.c: 205: }
   771                           ;main.c: 206: PORTA &= ~(1<<2);
   772  0127  30FB               	movlw	251
   773  0128  00F3               	movwf	??_isr
   774  0129  0873               	movf	??_isr,w
   775  012A  1283               	bcf	3,5	;RP0=0, select bank0
   776  012B  1303               	bcf	3,6	;RP1=0, select bank0
   777  012C  0585               	andwf	5,f	;volatile
   778                           
   779                           ;main.c: 208: PORTD=0x00;
   780  012D  0188               	clrf	8	;volatile
   781                           
   782                           ;main.c: 209: PORTA |= (1<<3);
   783  012E  1585               	bsf	5,3	;volatile
   784                           
   785                           ;main.c: 210: if(fourth>=0)
   786  012F  1BA1               	btfsc	_fourth+1,7
   787  0130  293A               	goto	i1l881
   788                           
   789                           ;main.c: 211: {
   790                           ;main.c: 212: show(fourth);
   791  0131  0821               	movf	_fourth+1,w
   792  0132  00F1               	movwf	show@digit+1
   793  0133  0820               	movf	_fourth,w
   794  0134  00F0               	movwf	show@digit
   795  0135  120A  118A  214D  120A  118A  	fcall	_show
   796  013A                     i1l881:	
   797                           
   798                           ;main.c: 213: }
   799                           ;main.c: 214: PORTA &= ~(1<<3);
   800  013A  30F7               	movlw	247
   801  013B  00F3               	movwf	??_isr
   802  013C  0873               	movf	??_isr,w
   803  013D  1283               	bcf	3,5	;RP0=0, select bank0
   804  013E  1303               	bcf	3,6	;RP1=0, select bank0
   805  013F  0585               	andwf	5,f	;volatile
   806  0140                     i1l95:	
   807  0140  0878               	movf	??_isr+5,w
   808  0141  1283               	bcf	3,5	;RP0=0, select bank0
   809  0142  1303               	bcf	3,6	;RP1=0, select bank0
   810  0143  00FF               	movwf	127
   811  0144  0877               	movf	??_isr+4,w
   812  0145  008A               	movwf	10
   813  0146  0876               	movf	??_isr+3,w
   814  0147  0084               	movwf	4
   815  0148  0E75               	swapf	(??_isr+2)^(0+-128),w
   816  0149  0083               	movwf	3
   817  014A  0EFE               	swapf	126,f
   818  014B  0E7E               	swapf	126,w
   819  014C  0009               	retfie
   820  014D                     __end_of_isr:	
   821                           
   822                           	psect	intentry
   823  0004                     __pintentry:	
   824                           ;incstack = 0
   825                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   826                           
   827  0004                     interrupt_function:	
   828  007E                     saved_w	set	btemp
   829  0004  00FE               	movwf	btemp
   830  0005  0E03               	swapf	3,w
   831  0006  00F5               	movwf	??_isr+2
   832  0007  0804               	movf	4,w
   833  0008  00F6               	movwf	??_isr+3
   834  0009  080A               	movf	10,w
   835  000A  00F7               	movwf	??_isr+4
   836  000B  1283               	bcf	3,5	;RP0=0, select bank0
   837  000C  1303               	bcf	3,6	;RP1=0, select bank0
   838  000D  087F               	movf	btemp+1,w
   839  000E  00F8               	movwf	??_isr+5
   840  000F  120A  118A  283D   	ljmp	_isr
   841                           
   842                           	psect	text2
   843  014D                     __ptext2:	
   844 ;; *************** function _show *****************
   845 ;; Defined at:
   846 ;;		line 37 in file "main.c"
   847 ;; Parameters:    Size  Location     Type
   848 ;;  digit           2    0[COMMON] int 
   849 ;; Auto vars:     Size  Location     Type
   850 ;;		None
   851 ;; Return value:  Size  Location     Type
   852 ;;                  1    wreg      void 
   853 ;; Registers used:
   854 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   855 ;; Tracked objects:
   856 ;;		On entry : 0/0
   857 ;;		On exit  : 0/0
   858 ;;		Unchanged: 0/0
   859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   860 ;;      Params:         2       0       0       0       0
   861 ;;      Locals:         0       0       0       0       0
   862 ;;      Temps:          1       0       0       0       0
   863 ;;      Totals:         3       0       0       0       0
   864 ;;Total ram usage:        3 bytes
   865 ;; Hardware stack levels used:    1
   866 ;; This function calls:
   867 ;;		Nothing
   868 ;; This function is called by:
   869 ;;		_isr
   870 ;; This function uses a non-reentrant model
   871 ;;
   872                           
   873                           
   874                           ;psect for function _show
   875  014D                     _show:	
   876                           
   877                           ;main.c: 38: switch(digit)
   878                           
   879                           ;incstack = 0
   880                           ; Regs used in _show: [wreg-fsr0h+status,2+status,0]
   881  014D  29BE               	goto	i1l779
   882  014E                     i1l745:	
   883                           ;main.c: 39: {
   884                           ;main.c: 40: case 0:
   885                           
   886                           
   887                           ;main.c: 41: {
   888                           ;main.c: 42: PORTD |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<5));
   889  014E  303F               	movlw	63
   890  014F  00F2               	movwf	??_show
   891  0150  0872               	movf	??_show,w
   892  0151  1283               	bcf	3,5	;RP0=0, select bank0
   893  0152  1303               	bcf	3,6	;RP1=0, select bank0
   894  0153  0488               	iorwf	8,f	;volatile
   895                           
   896                           ;main.c: 43: break;
   897  0154  0008               	return
   898  0155                     i1l747:	
   899                           ;main.c: 44: }
   900                           ;main.c: 45: case 1:
   901                           
   902                           
   903                           ;main.c: 46: {
   904                           ;main.c: 47: PORTD |= ((1<<1)|(1<<2));
   905  0155  3006               	movlw	6
   906  0156  00F2               	movwf	??_show
   907  0157  0872               	movf	??_show,w
   908  0158  1283               	bcf	3,5	;RP0=0, select bank0
   909  0159  1303               	bcf	3,6	;RP1=0, select bank0
   910  015A  0488               	iorwf	8,f	;volatile
   911                           
   912                           ;main.c: 48: break;
   913  015B  0008               	return
   914  015C                     i1l749:	
   915                           ;main.c: 49: }
   916                           ;main.c: 50: case 2:
   917                           
   918                           
   919                           ;main.c: 51: {
   920                           ;main.c: 52: PORTD |= ((1<<0)|(1<<1)|(1<<3)|(1<<4)|(1<<6));
   921  015C  305B               	movlw	91
   922  015D  00F2               	movwf	??_show
   923  015E  0872               	movf	??_show,w
   924  015F  1283               	bcf	3,5	;RP0=0, select bank0
   925  0160  1303               	bcf	3,6	;RP1=0, select bank0
   926  0161  0488               	iorwf	8,f	;volatile
   927                           
   928                           ;main.c: 53: break;
   929  0162  0008               	return
   930  0163                     i1l751:	
   931                           ;main.c: 54: }
   932                           ;main.c: 55: case 3:
   933                           
   934                           
   935                           ;main.c: 56: {
   936                           ;main.c: 57: PORTD |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<6));
   937  0163  304F               	movlw	79
   938  0164  00F2               	movwf	??_show
   939  0165  0872               	movf	??_show,w
   940  0166  1283               	bcf	3,5	;RP0=0, select bank0
   941  0167  1303               	bcf	3,6	;RP1=0, select bank0
   942  0168  0488               	iorwf	8,f	;volatile
   943                           
   944                           ;main.c: 58: break;
   945  0169  0008               	return
   946  016A                     i1l753:	
   947                           ;main.c: 59: }
   948                           ;main.c: 60: case 4:
   949                           
   950                           
   951                           ;main.c: 61: {
   952                           ;main.c: 62: PORTD |= ((1<<1)|(1<<2)|(1<<5)|(1<<6));
   953  016A  3066               	movlw	102
   954  016B  00F2               	movwf	??_show
   955  016C  0872               	movf	??_show,w
   956  016D  1283               	bcf	3,5	;RP0=0, select bank0
   957  016E  1303               	bcf	3,6	;RP1=0, select bank0
   958  016F  0488               	iorwf	8,f	;volatile
   959                           
   960                           ;main.c: 63: break;
   961  0170  0008               	return
   962  0171                     i1l755:	
   963                           ;main.c: 64: }
   964                           ;main.c: 65: case 5:
   965                           
   966                           
   967                           ;main.c: 66: {
   968                           ;main.c: 67: PORTD |= ((1<<0)|(1<<2)|(1<<3)|(1<<6)|(1<<5));
   969  0171  306D               	movlw	109
   970  0172  00F2               	movwf	??_show
   971  0173  0872               	movf	??_show,w
   972  0174  1283               	bcf	3,5	;RP0=0, select bank0
   973  0175  1303               	bcf	3,6	;RP1=0, select bank0
   974  0176  0488               	iorwf	8,f	;volatile
   975                           
   976                           ;main.c: 68: break;
   977  0177  0008               	return
   978  0178                     i1l757:	
   979                           ;main.c: 69: }
   980                           ;main.c: 70: case 6:
   981                           
   982                           
   983                           ;main.c: 71: {
   984                           ;main.c: 72: PORTD |= ((1<<0)|(1<<2)|(1<<3)|(1<<4)|(1<<6)|(1<<5));
   985  0178  307D               	movlw	125
   986  0179  00F2               	movwf	??_show
   987  017A  0872               	movf	??_show,w
   988  017B  1283               	bcf	3,5	;RP0=0, select bank0
   989  017C  1303               	bcf	3,6	;RP1=0, select bank0
   990  017D  0488               	iorwf	8,f	;volatile
   991                           
   992                           ;main.c: 73: break;
   993  017E  0008               	return
   994  017F                     i1l759:	
   995                           ;main.c: 74: }
   996                           ;main.c: 75: case 7:
   997                           
   998                           
   999                           ;main.c: 76: {
  1000                           ;main.c: 77: PORTD |= ((1<<0)|(1<<2)|(1<<1));
  1001  017F  3007               	movlw	7
  1002  0180  00F2               	movwf	??_show
  1003  0181  0872               	movf	??_show,w
  1004  0182  1283               	bcf	3,5	;RP0=0, select bank0
  1005  0183  1303               	bcf	3,6	;RP1=0, select bank0
  1006  0184  0488               	iorwf	8,f	;volatile
  1007                           
  1008                           ;main.c: 78: break;
  1009  0185  0008               	return
  1010  0186                     i1l761:	
  1011                           ;main.c: 79: }
  1012                           ;main.c: 80: case 8:
  1013                           
  1014                           
  1015                           ;main.c: 81: {
  1016                           ;main.c: 82: PORTD |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<6)|(1<<5));
  1017  0186  307F               	movlw	127
  1018  0187  00F2               	movwf	??_show
  1019  0188  0872               	movf	??_show,w
  1020  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1021  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1022  018B  0488               	iorwf	8,f	;volatile
  1023                           
  1024                           ;main.c: 83: break;
  1025  018C  0008               	return
  1026  018D                     i1l763:	
  1027                           ;main.c: 84: }
  1028                           ;main.c: 85: case 9:
  1029                           
  1030                           
  1031                           ;main.c: 86: {
  1032                           ;main.c: 87: PORTD |= ((1<<0)|(1<<1)|(1<<2)|(1<<3)|(1<<6)|(1<<5));
  1033  018D  306F               	movlw	111
  1034  018E  00F2               	movwf	??_show
  1035  018F  0872               	movf	??_show,w
  1036  0190  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0191  1303               	bcf	3,6	;RP1=0, select bank0
  1038  0192  0488               	iorwf	8,f	;volatile
  1039                           
  1040                           ;main.c: 88: break;
  1041  0193  0008               	return
  1042  0194                     i1l765:	
  1043                           ;main.c: 89: }
  1044                           ;main.c: 90: case 10:
  1045                           
  1046                           
  1047                           ;main.c: 91: {
  1048                           ;main.c: 92: PORTD |= ((1<<0)|(1<<1)|(1<<2)|(1<<4)|(1<<6)|(1<<5));
  1049  0194  3077               	movlw	119
  1050  0195  00F2               	movwf	??_show
  1051  0196  0872               	movf	??_show,w
  1052  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1053  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1054  0199  0488               	iorwf	8,f	;volatile
  1055                           
  1056                           ;main.c: 93: break;
  1057  019A  0008               	return
  1058  019B                     i1l767:	
  1059                           ;main.c: 94: }
  1060                           ;main.c: 95: case 11:
  1061                           
  1062                           
  1063                           ;main.c: 96: {
  1064                           ;main.c: 97: PORTD |= ((1<<2)|(1<<3)|(1<<4)|(1<<6)|(1<<5));
  1065  019B  307C               	movlw	124
  1066  019C  00F2               	movwf	??_show
  1067  019D  0872               	movf	??_show,w
  1068  019E  1283               	bcf	3,5	;RP0=0, select bank0
  1069  019F  1303               	bcf	3,6	;RP1=0, select bank0
  1070  01A0  0488               	iorwf	8,f	;volatile
  1071                           
  1072                           ;main.c: 98: break;
  1073  01A1  0008               	return
  1074  01A2                     i1l769:	
  1075                           ;main.c: 99: }
  1076                           ;main.c: 100: case 12:
  1077                           
  1078                           
  1079                           ;main.c: 101: {
  1080                           ;main.c: 102: PORTD |= ((1<<0)|(1<<3)|(1<<4)|(1<<5));
  1081  01A2  3039               	movlw	57
  1082  01A3  00F2               	movwf	??_show
  1083  01A4  0872               	movf	??_show,w
  1084  01A5  1283               	bcf	3,5	;RP0=0, select bank0
  1085  01A6  1303               	bcf	3,6	;RP1=0, select bank0
  1086  01A7  0488               	iorwf	8,f	;volatile
  1087                           
  1088                           ;main.c: 103: break;
  1089  01A8  0008               	return
  1090  01A9                     i1l771:	
  1091                           ;main.c: 104: }
  1092                           ;main.c: 105: case 13:
  1093                           
  1094                           
  1095                           ;main.c: 106: {
  1096                           ;main.c: 107: PORTD |= ((1<<1)|(1<<2)|(1<<3)|(1<<4)|(1<<6));
  1097  01A9  305E               	movlw	94
  1098  01AA  00F2               	movwf	??_show
  1099  01AB  0872               	movf	??_show,w
  1100  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1101  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1102  01AE  0488               	iorwf	8,f	;volatile
  1103                           
  1104                           ;main.c: 108: break;
  1105  01AF  0008               	return
  1106  01B0                     i1l773:	
  1107                           ;main.c: 109: }
  1108                           ;main.c: 110: case 14:
  1109                           
  1110                           
  1111                           ;main.c: 111: {
  1112                           ;main.c: 112: PORTD |= ((1<<0)|(1<<3)|(1<<4)|(1<<6)|(1<<5));
  1113  01B0  3079               	movlw	121
  1114  01B1  00F2               	movwf	??_show
  1115  01B2  0872               	movf	??_show,w
  1116  01B3  1283               	bcf	3,5	;RP0=0, select bank0
  1117  01B4  1303               	bcf	3,6	;RP1=0, select bank0
  1118  01B5  0488               	iorwf	8,f	;volatile
  1119                           
  1120                           ;main.c: 113: break;
  1121  01B6  0008               	return
  1122  01B7                     i1l775:	
  1123                           ;main.c: 114: }
  1124                           ;main.c: 115: case 15:
  1125                           
  1126                           
  1127                           ;main.c: 116: {
  1128                           ;main.c: 117: PORTD |= ((1<<0)|(1<<4)|(1<<6)|(1<<5));
  1129  01B7  3071               	movlw	113
  1130  01B8  00F2               	movwf	??_show
  1131  01B9  0872               	movf	??_show,w
  1132  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1133  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1134  01BC  0488               	iorwf	8,f	;volatile
  1135                           
  1136                           ;main.c: 119: }
  1137                           ;main.c: 120: }
  1138                           
  1139                           ;main.c: 118: break;
  1140  01BD  0008               	return
  1141  01BE                     i1l779:	
  1142                           
  1143                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1144                           ; Switch size 1, requested type "space"
  1145                           ; Number of cases is 1, Range of values is 0 to 0
  1146                           ; switch strategies available:
  1147                           ; Name         Instructions Cycles
  1148                           ; simple_byte            4     3 (average)
  1149                           ; direct_byte           11     8 (fixed)
  1150                           ; jumptable            260     6 (fixed)
  1151                           ;	Chosen strategy is simple_byte
  1152  01BE  0871               	movf	show@digit+1,w
  1153  01BF  3A00               	xorlw	0	; case 0
  1154  01C0  1903               	skipnz
  1155  01C1  29C3               	goto	i1l923
  1156  01C2  29F5               	goto	i1l69
  1157  01C3                     i1l923:	
  1158                           
  1159                           ; Switch size 1, requested type "space"
  1160                           ; Number of cases is 16, Range of values is 0 to 15
  1161                           ; switch strategies available:
  1162                           ; Name         Instructions Cycles
  1163                           ; simple_byte           49    25 (average)
  1164                           ; direct_byte           56     8 (fixed)
  1165                           ; jumptable            260     6 (fixed)
  1166                           ;	Chosen strategy is simple_byte
  1167  01C3  0870               	movf	show@digit,w
  1168  01C4  3A00               	xorlw	0	; case 0
  1169  01C5  1903               	skipnz
  1170  01C6  294E               	goto	i1l745
  1171  01C7  3A01               	xorlw	1	; case 1
  1172  01C8  1903               	skipnz
  1173  01C9  2955               	goto	i1l747
  1174  01CA  3A03               	xorlw	3	; case 2
  1175  01CB  1903               	skipnz
  1176  01CC  295C               	goto	i1l749
  1177  01CD  3A01               	xorlw	1	; case 3
  1178  01CE  1903               	skipnz
  1179  01CF  2963               	goto	i1l751
  1180  01D0  3A07               	xorlw	7	; case 4
  1181  01D1  1903               	skipnz
  1182  01D2  296A               	goto	i1l753
  1183  01D3  3A01               	xorlw	1	; case 5
  1184  01D4  1903               	skipnz
  1185  01D5  2971               	goto	i1l755
  1186  01D6  3A03               	xorlw	3	; case 6
  1187  01D7  1903               	skipnz
  1188  01D8  2978               	goto	i1l757
  1189  01D9  3A01               	xorlw	1	; case 7
  1190  01DA  1903               	skipnz
  1191  01DB  297F               	goto	i1l759
  1192  01DC  3A0F               	xorlw	15	; case 8
  1193  01DD  1903               	skipnz
  1194  01DE  2986               	goto	i1l761
  1195  01DF  3A01               	xorlw	1	; case 9
  1196  01E0  1903               	skipnz
  1197  01E1  298D               	goto	i1l763
  1198  01E2  3A03               	xorlw	3	; case 10
  1199  01E3  1903               	skipnz
  1200  01E4  2994               	goto	i1l765
  1201  01E5  3A01               	xorlw	1	; case 11
  1202  01E6  1903               	skipnz
  1203  01E7  299B               	goto	i1l767
  1204  01E8  3A07               	xorlw	7	; case 12
  1205  01E9  1903               	skipnz
  1206  01EA  29A2               	goto	i1l769
  1207  01EB  3A01               	xorlw	1	; case 13
  1208  01EC  1903               	skipnz
  1209  01ED  29A9               	goto	i1l771
  1210  01EE  3A03               	xorlw	3	; case 14
  1211  01EF  1903               	skipnz
  1212  01F0  29B0               	goto	i1l773
  1213  01F1  3A01               	xorlw	1	; case 15
  1214  01F2  1903               	skipnz
  1215  01F3  29B7               	goto	i1l775
  1216  01F4  29F5               	goto	i1l69
  1217  01F5                     i1l69:	
  1218  01F5  0008               	return
  1219  01F6                     __end_of_show:	
  1220  007E                     btemp	set	126	;btemp
  1221  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        14
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      13
    BANK0            80      0      10
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_show

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _isr                                                  6     6      0     234
                                              3 COMMON     6     6      0
                               _show
 ---------------------------------------------------------------------------------
 (2) _show                                                 3     1      2     234
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _isr (ROOT)
   _show

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0       A       5       12.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      17      12        0.0%
ABS                  0      0      17       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 09 23:00:40 2018

                      pc 0002              __CFG_CP$OFF 0000                       fsr 0004  
            __CFG_LVP$ON 0000                      l100 0218             __CFG_CPD$OFF 0000  
                    _key 007B                      _isr 003D                      fsr0 0004  
                    indf 0000             __CFG_FOSC$HS 0000                     ?_isr 0070  
                   _T0IF 005A                     i1l90 00F0                     i1l82 0085  
                   i1l83 0094                     i1l69 01F5                     i1l77 005A  
                   i1l95 0140                     _TMR0 0001                     _TMR1 000E  
           __CFG_WRT$OFF 0000                     _main 01F6                     _temp 0028  
                   _show 014D                     btemp 007E            __CFG_BOREN$ON 0000  
                   start 0012                    ??_isr 0073                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    ?_show 0070                    i1l805 0071  
                  i1l751 0163                    i1l831 00C5                    i1l761 0186  
                  i1l753 016A                    i1l745 014E                    i1l809 007B  
                  i1l923 01C3                    i1l771 01A9                    i1l763 018D  
                  i1l755 0171                    i1l747 0155                    i1l851 0101  
                  i1l835 00D6                    i1l843 00F4                    i1l819 00A9  
                  i1l773 01B0                    i1l765 0194                    i1l757 0178  
                  i1l749 015C                    i1l861 0114                    i1l775 01B7  
                  i1l767 019B                    i1l759 017F                    i1l871 0127  
                  i1l839 00E7                    i1l769 01A2                    i1l881 013A  
                  i1l779 01BE                    i1l795 0050                    u26_25 00A1  
                  _PORTA 0005                    _PORTB 0006                    _PORTD 0008  
                  _TRISA 0085                    _TRISB 0086                    _TRISD 0088  
          __CFG_PWRTE$ON 0000                    _first 0026                    _third 0022  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_main 0219             __end_of_show 01F6  
                 ??_main 0000                   ??_show 0072                   _INTCON 000B  
                 _TMR1IE 0460                   _TMR1IF 0060                   _TMR1ON 0080  
                 _fourth 0020                   _second 0024                   _result 0079  
           __pdataCOMMON 0079                   saved_w 007E  __end_of__initialization 0039  
         __pcstackCOMMON 0070             __pidataBANK0 022A               __pmaintext 01F6  
             __pintentry 0004                  _T1CKPS0 0084                  _T1CKPS1 0085  
                __ptext1 003D                  __ptext2 014D             __size_of_isr 0110  
   end_of_initialization 0039                _PORTBbits 0006            __pidataCOMMON 0234  
    start_initialization 0015              __end_of_isr 014D               init_fetch0 0219  
            __pdataBANK0 0020                ___latbits 0002            __pcstackBANK0 0000  
      interrupt_function 0004            __size_of_main 0023            __size_of_show 00A9  
              show@digit 0070                 init_ram0 021D                 intlevel1 0000  
             _OPTION_REG 0081  
